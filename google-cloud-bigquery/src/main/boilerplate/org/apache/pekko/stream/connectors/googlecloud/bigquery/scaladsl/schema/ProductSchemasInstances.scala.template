/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 */

/*
 * Copyright (C) 2016-2020 Lightbend Inc. <https://www.lightbend.com>
 */

package org.apache.pekko.stream.connectors.googlecloud.bigquery.scaladsl.schema

import org.apache.pekko
import pekko.stream.connectors.googlecloud.bigquery.model.TableFieldSchema
import pekko.stream.connectors.googlecloud.bigquery.model.TableFieldSchemaMode.Required

import scala.collection.immutable.Seq
import scala.reflect.{classTag, ClassTag}

trait ProductSchemasInstances { this: ProductSchemas with StandardSchemas =>
[#  // Case classes with 1 parameters

  def bigQuerySchema1[[#P1#], T <: Product: ClassTag](ev: ([#P1#]) => T)(implicit [#writer1: SchemaWriter[P1]#]): TableSchemaWriter[T] = new ProductSchemaWriter[T](schemaFields[[#P1#], T])

  private def schemaFields[[#P1#], T <: Product: ClassTag](implicit [#writer1: SchemaWriter[P1]#]): Seq[TableFieldSchema] = {
    val Array([#p1#]) = extractFieldNames(classTag[T])
    Seq([#writer1.write(p1, Required)#])
  }#

]
}
